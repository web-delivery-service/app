version: '3.8'

services:
  delivery_db:
    image: postgres:13-alpine
    container_name: delivery_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_OUTER_PORT}:${POSTGRES_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis_jobs_broker:
    image: redis:latest
    container_name: jobs_broker
    restart: always
    command: redis-server --loglevel warning
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./redisdata:/data
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_DATABASES=16
    env_file:
      - .env

  api:
    build: ./core
    container_name: delivery_api
    depends_on:
      - delivery_db
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    env_file:
      - .env
    command: sh -c "poetry run alembic upgrade head && poetry run uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"

  celery:
    build: ./core
    container_name: delivery_celery
    depends_on:
      - redis_jobs_broker
    ports:
      - "${CELERY_BROKER_PORT}:${CELERY_BROKER_PORT}"
    env_file:
      - .env
    command: sh -c "poetry run celery -A app.job_service.celery_app worker --loglevel=info"

  frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: delivery_frontend
    ports:
      - "3001:80"
    depends_on:
      - api

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: delivery_nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend

volumes:
  pgdata:
    driver: local